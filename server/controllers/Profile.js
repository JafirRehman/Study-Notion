//here inside delete account we add some code
//by ourself makesure to text them with student and 
//instructor
//  as well as test also instructorDashboard
const Profile = require('../models/Profile')
const User = require('../models/User')
const Course = require('../models/Course')
const Section = require('../models/Section')
const SubSection = require('../models/SubSection')
const Category=require("../models/Category")

const { filesendtocloudinary } = require('../utils/filesendtocloudinary')

require('dotenv').config()

// instructor Dashboard
exports.instructorDashboard = async (req, res) => {
    try {
        //get data
        const id = req.user.id
        //get courses of that user
        const allcourses = await Course.find({ instructor: id })
        // Create a new array with same data as allcourses but in that array each object
        //    will have additional values like totalstudents enrolled in that course and 
        //          total money generated by that course
        const courseData = allcourses.map((course) => {
            const totalStudentsEnrolled = course.studentsEnroled.length
            const totalAmountGenerated = totalStudentsEnrolled * course.price
            // Create a new object with the additional properties
            const courseDataWithStats = {
                _id: course._id,
                courseName: course.courseName,
                courseDescription: course.courseDescription,
                // Include other course properties as needed
                totalStudentsEnrolled,
                totalAmountGenerated,
            }
            return courseDataWithStats
        })
        //return that new array created with map with extra values
        return res.status(200).json({
            success: true,
            courses: courseData
        })
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: "something went wrong inside instructordashboard try block"
        })
    }
}
// get enrolled courses
exports.getEnrolledCourses = async (req, res) => {
    try {
        //get data
        const id = req.user.id;
        //validate user
        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({
                success: false,
                message: "User not found",
            });
        }
        // gey enrolled courses
        const enrolledCourses = await User.findById(id).populate({
            path: "courses",
            populate: {
                path: "courseContent",
                populate: {
                    path: "subSection"
                }
            }
        }).populate("courseProgress");
        //return response
        return res.status(200).json({
            success: true,
            message: "User Data fetched successfully",
            data: enrolledCourses,
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: "something went wrong inside getenrolledcourses try block",
        });
    }
}
// update profile picture
exports.updateDisplayPicture = async (req, res) => {
    try {
        //get data
        const displayPicture = req.files.displayPicture
        const userId = req.user.id
        //upload image to cloudinary
        const image = await filesendtocloudinary(
            displayPicture,
            process.env.FOLDER_NAME,
            1000,
            1000
        )
        //update profile
        const updatedProfile = await User.findByIdAndUpdate(
            { _id: userId },
            { image: image.secure_url },
            { new: true }
        )
        //return response
        return res.send({
            success: true,
            message: `Image Updated successfully`,
            data: updatedProfile,
        })
    } catch (error) {
        console.log(error)
        return res.status(500).json({
            success: false,
            message: "something went wrong inside updatedisplaypicture try block",
        })
    }
}
//get user details
exports.getAllUserDetails = async (req, res) => {
    try {
        //get user id
        const id = req.user.id
        //get user
        const userDetails = await User.findById(id)
            .populate("additionalDetails")
            .exec()
        //return response
        return res.status(200).json({
            success: true,
            message: "User Data fetched successfully",
            data: userDetails,
        })
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: "something went wrong inside getallUserdetails",
        })
    }
}
//delete account
exports.deleteAccount = async (req, res) => {
    try {
        //get id 
        const id = req.user.id
        //find user
        const user = await User.findById({ _id: id })
        if (!user) {
            return res.status(404).json({
                success: false,
                message: "User not found",
            })
        }
        // Delete Assosiated Profile with the User
        await Profile.findByIdAndDelete({
            _id: user.additionalDetails
        })
        //modify courses
        //if user is student
        if (user.courses.length > 0 && user.accountType === "Student") {
            for (const courseId of user.courses) {
                await Course.findByIdAndUpdate(
                    courseId,
                    { $pull: { studentsEnroled: id } },
                    { new: true }
                )
            }
        }
        //if user is instructor
        if (user.courses.length > 0 && user.accountType === "Instructor") {
            for (const courseId of user.courses) {
                const coursetodel = await Course.findOne({ _id: courseId })
                await Category.findByIdAndUpdate(coursetodel.category,{
                    $pull:{course:courseId}
                })
                for (const sectionid of coursetodel.courseContent) {
                    const sectiontodel = await Section.findOne({ _id: sectionid })
                    for(const subsectionid of sectiontodel.subSection){
                        await SubSection.findByIdAndDelete(subsectionid)
                    }
                    await Section.findByIdAndDelete(sectionid)
                }
                await Course.findByIdAndDelete(courseId)
            }
        }
        //delete course progresses
        //await CourseProgress.deleteMany({ userId: id })
        // Now Delete User
        await User.findByIdAndDelete({ _id: id })
        //return response
        return res.status(200).json({
            success: true,
            message: "User deleted successfully",
        })
    } catch (error) {
        console.log(error)
        return res.status(500).json({
            success: false,
            message: "something went wrong inside deleteaccount try block"
        })
    }
}
// update profile
exports.updateProfile = async (req, res) => {
    try {
        //get the data
        const { dateOfBirth, about, contactNumber, gender } = req.body;
        const id = req.user.id;
        //get the user and profile
        const userDetails = await User.findById(id);
        const profile = await Profile.findById(userDetails.additionalDetails);
        // Update the profile
        profile.dateOfBirth = dateOfBirth || profile.dateOfBirth;
        profile.about = about || profile.about;
        profile.gender = gender || profile.gender;
        profile.contactNumber = contactNumber || profile.contactNumber;
        // Save the updated profile
        await profile.save();
        //return response
        return res.json({
            success: true,
            message: "Profile updated successfully",
            profile,
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: "something went wrong in updateprofile try block",
        });
    }
};